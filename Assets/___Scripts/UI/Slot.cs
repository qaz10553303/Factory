using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.UI;


[System.Serializable]
public class Slot : MonoBehaviour
{
    public bool isUIOnly;
    public int itemId;
    public int itemAmount;
    public Image u_Icon;
    public Text u_Amount;

    public List<int> itemsCanTake = new List<int>();//means no limit if list.count==0
    public List<int> itemsCanStore= new List<int>();//means no limit if list.count==0



    //public enum SlotType
    //{
    //    NORMAL,
    //    DATA_ONLY,//only used to store data, usually generated by scripts,and will not refresh slot ui
    //    //TAKE_ONLY,//can only take items from this slot
    //    //STORE_ONLY,//can only store items to this slot
    //    //LIMITED,//can both take and store items but with specific types requirements when store 
    //    //NOLIMIT,//can both take and store items with no limit
    //}
    //public SlotType type;


    void Start()
    {
        
    }

    // Update is called once per frame
    void Update()
    {
        UpdateSlotUI();
        //if (type == SlotType.NORMAL)
        //{
        //    UpdateSlotUI();
        //}

    }

    void UpdateSlotUI()
    {
        if (itemId == 0)
        {
            u_Icon.sprite = null;
            u_Icon.enabled = false;
            u_Amount.text = "";
        }
        else if (itemId != 0 && itemAmount > 0)
        {
            Sprite sp = Resources.Load<Sprite>("Icons/Material/"+ItemManager.Instance.GetItemById(itemId).Name);
            u_Icon.sprite = sp;
            if (!isUIOnly)
            {
                u_Icon.color = new Color(1, 1, 1, 1);
            }
            u_Icon.enabled = true;
            u_Amount.text = itemAmount.ToString();
        }
        else if (itemsCanStore.Count==1|| itemsCanTake.Count == 1)//set low alpha when have specific store or take requirement but currently have no items in slot
        {
            Sprite sp = Resources.Load<Sprite>("Icons/Material/" + ItemManager.Instance.GetItemById(itemId).Name);
            u_Icon.sprite = sp;
            u_Icon.color = new Color(1, 1, 1, 0.3f);
            u_Icon.enabled = true;
            u_Amount.text = "";
        }
    }



    public void OnSlotSelected()
    {
        if (InventoryManager.Instance.selectedItemInfo.itemId == 0)//if currently selects nothing
        {
            if (itemAmount <= 0) return;
            if (itemsCanTake.Count==0||itemsCanTake.Contains(itemId))//trying to take items from this slot
            {
                InventoryManager.Instance.selectedItemInfo.itemId = this.itemId;
                InventoryManager.Instance.selectedItemInfo.itemAmount = this.itemAmount;
                itemId = 0;
                itemAmount = 0;
            }
        }
        else
        {
            if(itemsCanStore.Count==0||itemsCanStore.Contains(InventoryManager.Instance.selectedItemInfo.itemId))//trying to store items to this slot
            {
                InventoryManager.Instance.selectedItemInfo.itemAmount = //save the rest amount
                                InventoryManager.Instance.AddItemToSlot(InventoryManager.Instance.selectedItemInfo.itemId, InventoryManager.Instance.selectedItemInfo.itemAmount, this);
                if (InventoryManager.Instance.selectedItemInfo.itemAmount <= 0)
                {
                    InventoryManager.Instance.selectedItemInfo.itemId = 0;
                }
            }
            
        }
    }

    public void ClearSlot()
    {
        itemId = 0;
        itemAmount = 0;
        itemsCanStore = new List<int>();
        itemsCanTake = new List<int>();
    }
}
